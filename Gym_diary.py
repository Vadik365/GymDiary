import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
import json
from fpdf import FPDF
import dropbox
from pathlib import Path

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
DROPBOX_TOKEN = os.getenv('DROPBOX_TOKEN')
ADMIN_ID = os.getenv("ADMIN_ID")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

dbx = dropbox.Dropbox(DROPBOX_TOKEN)


def upload_to_dropbox(file_path, dropbox_path):
    with open(file_path, "rb") as f:
        dbx.files_upload(f.read(), dropbox_path,
                         mode=dropbox.files.WriteMode.overwrite)
    shared_link_metadata = dbx.sharing_create_shared_link_with_settings(
        dropbox_path)
    return shared_link_metadata.url.replace("?dl=0", "?dl=1")


bot = Bot(token=API_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
dp = Dispatcher()

# SQLite
conn = sqlite3.connect("gym_diary.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS trainings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    start_time TEXT,
    end_time TEXT,
    exercises TEXT
)
''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç")]
    ],
    resize_keyboard=True
)

report_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton(text="üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")],
        [KeyboardButton(text="üìÑ –û—Ç—á–µ—Ç –≤ PDF")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

confirm_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?"), KeyboardButton(text="‚ûï –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
user_sessions = {}


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø Gym Diary Bot üí™\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_kb)
    username = message.from_user.username or "<no username>"
    try:
        await bot.send_message(ADMIN_ID, f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nID: {message.from_user.id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")


@dp.message(Command("users"))
async def list_users(message: types.Message):
    cursor.execute("SELECT DISTINCT user_id, username FROM trainings")
    users = cursor.fetchall()
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for uid, uname in users:
        name = f"@{uname}" if uname and uname != "<no username>" else f"ID: {uid}"
        text += f"‚Ä¢ {name}\n"
    await message.answer(text)


@dp.message(F.text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_training(message: types.Message):
    user_id = message.from_user.id
    user_sessions[user_id] = {
        "start": datetime.now(),
        "exercises": [],
        "buffer": []
    }
    await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞. –í–≤–µ–¥–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ñ–∏–º –ª—ë–∂–∞ 1x60–∫–≥\n–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 1x25–∫–≥")


@dp.message(F.text.in_({"‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?"}))
async def finish_training(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
        return

    session["exercises"].extend(session["buffer"])
    session["buffer"] = []
    end_time = datetime.now()
    exercises_list = session["exercises"]
    exercises_json = json.dumps(exercises_list)

    cursor.execute("INSERT INTO trainings (user_id, username, start_time, end_time, exercises) VALUES (?, ?, ?, ?, ?)", (
        user_id,
        message.from_user.username or "<no username>",
        session["start"].strftime("%Y-%m-%d %H:%M:%S"),
        end_time.strftime("%Y-%m-%d %H:%M:%S"),
        exercises_json
    ))
    conn.commit()

    start_str = session["start"].strftime("%d.%m %H:%M")
    end_str = end_time.strftime("%H:%M")
    exercises_text = "\n".join(
        f"‚Ä¢ {ex}" for ex in exercises_list) if exercises_list else "‚Äî –±–µ–∑ –∑–∞–ø–∏—Å–µ–π"
    del user_sessions[user_id]

    await message.answer(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\nüïí {start_str} ‚Äî {end_str}\n{exercises_text}", reply_markup=main_kb)


@dp.message(F.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç")
async def report_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞:", reply_markup=report_kb)


@dp.message(F.text.in_({"üìÖ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", "üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"}))
async def report_period(message: types.Message):
    user_id = message.from_user.id
    now = datetime.now()
    if message.text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é":
        since = now - timedelta(days=7)
        title = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    else:
        since = now - timedelta(days=30)
        title = "–∑–∞ –º–µ—Å—è—Ü"

    cursor.execute(
        "SELECT start_time, end_time, exercises FROM trainings WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    filtered = []
    for start, end, ex_json in rows:
        start_dt = datetime.strptime(start, "%Y-%m-%d %H:%M:%S")
        if start_dt >= since:
            filtered.append((start_dt, datetime.strptime(
                end, "%Y-%m-%d %H:%M:%S"), json.loads(ex_json)))
    if not filtered:
        await message.answer(f"–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ {title}.")
        return

    response = f"üìä –û—Ç—á–µ—Ç {title}:\n\n"
    for i, (start, end, exercises) in enumerate(filtered, 1):
        ex_text = "\n".join(f"‚Ä¢ {ex}" for ex in exercises) or "‚Äî –±–µ–∑ –∑–∞–ø–∏—Å–µ–π"
        response += f"<b>{i}) {start.strftime('%d.%m %H:%M')} ‚Äì {end.strftime('%H:%M')}</b>\n{ex_text}\n\n"
    await message.answer(response)


@dp.message(F.text == "üìÑ –û—Ç—á–µ—Ç –≤ PDF")
async def export_monthly_pdf(message: types.Message):
    user_id = message.from_user.id
    now = datetime.now()
    since = now - timedelta(days=30)
    cursor.execute(
        "SELECT start_time, end_time, exercises FROM trainings WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    filtered = []
    for start, end, ex_json in rows:
        start_dt = datetime.strptime(start, "%Y-%m-%d %H:%M:%S")
        if start_dt >= since:
            filtered.append((start_dt, datetime.strptime(
                end, "%Y-%m-%d %H:%M:%S"), json.loads(ex_json)))
    if not filtered:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")
        return

    pdf = FPDF()
    pdf.add_page()
    # üëá –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
    font_path = Path(__file__).parent / "DejaVuSans.ttf"
    print("Font path:", font_path.resolve())
    pdf.add_font("DejaVu", "", str(font_path), uni=True)
    pdf.set_font("DejaVu", size=12)

    username_display = f"@{message.from_user.username}" if message.from_user.username else f"ID {user_id}"
    pdf.cell(
        0, 10, txt=f"–û—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_display} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", ln=True, align='C')
    for i, (start, end, exercises) in enumerate(filtered, 1):
        pdf.ln(5)
        pdf.cell(
            0, 10, txt=f"{i}) {start.strftime('%d.%m %H:%M')} ‚Äî {end.strftime('%H:%M')}", ln=True)
        for ex in exercises:
            pdf.cell(0, 10, txt=f"   ‚Ä¢ {ex}", ln=True)

    file_path = f"training_report_{user_id}_month.pdf"
    pdf.output(file_path)
    await message.answer_document(FSInputFile(file_path), caption="üìÑ –í–æ—Ç —Ç–≤–æ–π –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")

    try:
        link = upload_to_dropbox(file_path, f"/reports/{file_path}")
        await message.answer(f"‚òÅÔ∏è –û—Ç—á–µ—Ç —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Dropbox:\n{link}")
    except Exception as e:
        print(f"Dropbox –æ—à–∏–±–∫–∞: {e}")
    try:
        os.remove(file_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)


@dp.message(F.text == "‚ûï –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def continue_training(message: types.Message):
    await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤–≤–æ–¥–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚¨áÔ∏è", reply_markup=ReplyKeyboardRemove())


@dp.message()
async def log_exercise(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if session:
        session["buffer"].append(message.text)
        await message.answer("–î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫?", reply_markup=confirm_kb)
    else:
        await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏ ¬´üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª")


async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
